/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package presentation;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableModel;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;

import services.PersistenceService;

public class QueryInterfaceUI extends javax.swing.JFrame implements 

ActionListener, ChangeListener {

   
	
	
	static final int WIDTH = 800;
	static final int HEIGHT = 220;

	static final String ACTION_RUN = "runQuery";
	

	static final double DEFAULT_AXIAL_TILT = 23.44;
	static final double DEFAULT_ORBITAL_ECCENTRICITY = .0167;
	private Date simStart, simEnd;
	private static final long serialVersionUID = -15968456987503L; 
	private double tilt = DEFAULT_AXIAL_TILT;
	// persistence service
	private PersistenceService ps;
	private static QueryInterfaceUI instance;
	int WIDTH_LABELS = WIDTH * 4 / 7 * 1
			/ 4;
	int WIDTH_EDITS = WIDTH * 4 / 7 * 3
			/ 4;
	int LABEL_HEIGHT = 26;
	private String simulationName = null;
	private double lat_Start, lat_End, long_Start, long_End, lat, longt;
	private boolean maxTemp, minTemp, meanTempRegion, meanTempTime, tempsTimeRegion;
	
	private double eccentricity = DEFAULT_ORBITAL_ECCENTRICITY;
	private boolean entireEarth;
	
	
	


	
	 /**
     * Creates new form QueryInterfaceUI  
     */
   private QueryInterfaceUI() {
        
    	//ps = PersistenceService.getInstance();
    	createGui();
    	this.setVisible(true);
    	setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Query Interface");
        setName("QInterfaceFrame"); 
        lat = 33.7784626;
    	longt = -84.3988806;
		
		
		
		
        
    }
    
  //Singleton, similar to Gui.java
  	public static QueryInterfaceUI getInstance() {
  		if (instance == null) {
  			instance = new QueryInterfaceUI();
  		}
  		return instance;
  	}

  	public static void destroy() {
		if (instance != null) {
			instance = null;
		}
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-

    private void createGui() {
    	
    	
    	this.getContentPane().setPreferredSize(
				new Dimension(800, 620));
    	int EDIT_BOX_WIDTH = 4;
		int LABEL_HEIGHT = 26;
    	
		firstPanel = new JPanel();
		firstPanel.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, Color.blue));
		firstPanel.setLayout(new java.awt.BorderLayout());
		//firstPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
		QueryInterfaceLabel = new javax.swing.JLabel();
        tableOptionsLabel = new javax.swing.JLabel();
        qrybuttonGroup1 = new ButtonGroup();
        regionbuttonGroup = new ButtonGroup();
        runQuery = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        filter = new javax.swing.JButton();
        animate = new javax.swing.JButton();
        byNameButton = new JRadioButton();
        byPFButton = new JRadioButton();
        earthButton = new JRadioButton();
        parametersButton = new JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        simulationNameLabel = new javax.swing.JLabel();
        
        
       
        axisTiltLabel = new javax.swing.JLabel();
        axisTiltField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        orbitalEccentricityLabel = new javax.swing.JLabel();
        orbitalEccentricityField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        latitudeLabel = new javax.swing.JLabel();
        latitudeFromField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        jLabel10 = new javax.swing.JLabel();
        latitudeToField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        longitudeLabel = new javax.swing.JLabel();
        longitudeFromField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        jLabel11 = new javax.swing.JLabel();
        longitudeToField = new javax.swing.JTextField(EDIT_BOX_WIDTH);
        simulationPeriodLabel = new javax.swing.JLabel();
        simulationStartField = new javax.swing.JFormattedTextField();
        simulationStartField.setColumns(5);
        simulationStartField.setActionCommand(getName());
        
        latitudeFromField.setEnabled(false);
        latitudeToField.setEnabled(false);
        longitudeFromField.setEnabled(false);
        longitudeToField.setEnabled(false);
        
        jLabel9 = new javax.swing.JLabel();
        simulationEndField = new javax.swing.JFormattedTextField();
        simulationEndField.setColumns(5);
        
        simulationEndField.setActionCommand(getName());
        jPanel2 = new javax.swing.JPanel();
        minTempLabel = new javax.swing.JLabel();
        minTempCheckbox = new javax.swing.JCheckBox();
        regionMeanTempLabel = new javax.swing.JLabel();
        meanTempRegionCheckbox = new javax.swing.JCheckBox();
        maxTempLabel = new javax.swing.JLabel();
        maxTempRegionCheckbox = new javax.swing.JCheckBox();
        timeMeanTempLabel = new javax.swing.JLabel();
        meanTempTimeCheckbox = new javax.swing.JCheckBox();
        tempTimeRegionLabel = new javax.swing.JLabel();
        tempsTimeRegionCheckbox = new javax.swing.JCheckBox();
        
        QueryInterfaceLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        QueryInterfaceLabel.setText("Query Interface");
        
        JLabel s1 = new JLabel("                                             ");
        JLabel s2 = new JLabel("                   ");
        JLabel s3 = new JLabel("   ");

		
		JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		topPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
		
    	qrybuttonGroup1.add(byNameButton); 
        byNameButton.setText("Name");
        byNameButton.setActionCommand("byName");
        byNameButton.addActionListener(this);
        qrybuttonGroup1.add(byPFButton);
        byPFButton.setText("Physical Factors");
        byPFButton.setActionCommand("byPF");
        byPFButton.addActionListener(this);
       

        simulationNameLabel.setText("Simulation name: ");
        
        nameSpinner = new JComboBox();
        
        
        //nameSpinner = new JSpinner();
        nameSpinner.setName("Name");
        nameSpinner.setSize(EDIT_BOX_WIDTH, LABEL_HEIGHT);
        nameSpinner.addActionListener(this);
        nameSpinner.setActionCommand(getName());
        //nameSpinner.setModel(new SimulationNameSpinnerModel(new Object[]{}));
        //nameSpinner.setModel(new SpinnerListModel(new Object[]{" "}));
        JPanel namePFPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        namePFPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        Border nameBorder = BorderFactory.createTitledBorder("Search by ");
        
        //namePFPanel.add(new JLabel("Search by: "));
        
        JPanel namePFRadioPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        //namePFRadioPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        
        namePFRadioPanel.add(byNameButton);
        namePFRadioPanel.add(byPFButton);
        namePFRadioPanel.setBorder(nameBorder);
        
        
        namePFPanel.add(namePFRadioPanel, BorderLayout.NORTH );
        
        //JPanel namePFvaluePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        Border valueBorder = BorderFactory.createTitledBorder("Matching Simulations ");
        
        
        namePFvaluePanel.add(simulationNameLabel);
        namePFvaluePanel.add(nameSpinner);
       
     
        namePFvaluePanel.setBorder(valueBorder);
        namePFPanel.add(namePFvaluePanel, BorderLayout.CENTER );
        
        
       
        topPanel.add(namePFPanel, BorderLayout.WEST);
        
        
        JPanel options2Panel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        options2Panel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        JPanel PFPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        //PFPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        Border pfBorder = BorderFactory.createTitledBorder("Physical factors ");
        PFPanel.setBorder(pfBorder);
        
        axisTiltLabel.setText("Axial tilt");
        orbitalEccentricityLabel.setText("Orbital eccentricity");
        axisTiltField.setEnabled(false);
        orbitalEccentricityField.setEnabled(false);
        PFPanel.add(axisTiltLabel);
        PFPanel.add(axisTiltField);
       // PFPanel.add(axisTiltSlider);
        PFPanel.add(orbitalEccentricityLabel);
        PFPanel.add(orbitalEccentricityField);
        
        options2Panel.add(PFPanel, BorderLayout.NORTH);
        
        
        
        JPanel periodPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        //periodPanel.setPreferredSize(new Dimension(WIDTH_EDITS, 150));
        Border periodBorder = BorderFactory.createTitledBorder("Time Period ");
        periodBorder.getBorderInsets(PFPanel);
        periodPanel.setBorder(periodBorder);
        simulationStartField.setEnabled(false);
        simulationEndField.setEnabled(false);
        //periodPanel.add(new JLabel("Simulation Time period"));
        periodPanel.add(new JLabel("Start time:"));
        periodPanel.add(simulationStartField);
        periodPanel.add(new JLabel("End time:"));
        periodPanel.add(simulationEndField);
        periodPanel.add(new JLabel("                               "));
        
        simulationStartField.setAction(simulationStartField.getAction());
        simulationEndField.setAction(simulationEndField.getAction());
        //PFPanel.add(periodPanel, BorderLayout.SOUTH);
        options2Panel.add(periodPanel, BorderLayout.SOUTH);
        
        topPanel.add(options2Panel, BorderLayout.EAST);
        
        //this.getContentPane().add(topPanel, BorderLayout.NORTH);
        firstPanel.add(topPanel, BorderLayout.NORTH);
        JPanel regionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
       
        regionPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        Border regionBorder = BorderFactory.createTitledBorder("");
        regionPanel.setBorder(regionBorder);
        Border regionoptionBorder = BorderFactory.createTitledBorder("Physical bounds ");
        
        JPanel regionoptionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        regionoptionPanel.setBorder(regionoptionBorder);
        //regionPanel.add(new JLabel("Physical bounds"));
        regionPanel.add(s1);
        regionbuttonGroup.add(earthButton); 
        earthButton.setText("Whole Earth");
        earthButton.setActionCommand("earth");
        earthButton.addActionListener(this);
        regionbuttonGroup.add(parametersButton);
        parametersButton.setText("Use parameters provided");
        parametersButton.setActionCommand("parameters");
        parametersButton.addActionListener(this);
       
        
        regionoptionPanel.add(earthButton);
        //regionoptionPanel.add(s3);
        regionoptionPanel.add(parametersButton);
        regionPanel.add(regionoptionPanel, BorderLayout.NORTH);
        
        JPanel locationPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        Border locBorder = BorderFactory.createTitledBorder("");
        locationPanel.setBorder(locBorder);
        latitudeFromField.setEnabled(false);
        latitudeToField.setEnabled(false);
        longitudeFromField.setEnabled(false);
        longitudeToField.setEnabled(false);
        latitudeLabel.setText("Latitude");
        locationPanel.add(latitudeLabel);
        locationPanel.add(new JLabel("Start"));
        locationPanel.add(latitudeFromField);
        locationPanel.add(new JLabel("End"));
        locationPanel.add(latitudeToField);
        locationPanel.add(s3);
        longitudeLabel.setText("Longitude");
        locationPanel.add(longitudeLabel);
        locationPanel.add(new JLabel("Start"));
        locationPanel.add(longitudeFromField);
        locationPanel.add(new JLabel("End"));
        locationPanel.add(longitudeToField);
        
        JPanel filterPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        filterPanel.setBorder(locBorder);
        filter.setText("Filter");
        filter.addActionListener(this);
		filter.setEnabled(true); 
        filter.setActionCommand("filter");
        filterPanel.add(filter);
        
        
        
        
        regionPanel.add(locationPanel, BorderLayout.CENTER);
        regionPanel.add(s1);
        regionPanel.add(s1);
        regionPanel.add(s1);
        regionPanel.add(s1);
        
        
        
        regionPanel.add(filterPanel, BorderLayout.EAST);
        //this.getContentPane().

        firstPanel.add(regionPanel, BorderLayout.CENTER);
        
        JPanel optionsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        optionsPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        Border optionsBorder = BorderFactory.createTitledBorder("Include results for");
        optionsPanel.setBorder(optionsBorder);
        
        minTempLabel.setText("Minumum temperature");
        regionMeanTempLabel.setText("Mean temperature over region");
        maxTempLabel.setText("Maximum temperature");
        timeMeanTempLabel.setText("Mean temperature over time");
        tempTimeRegionLabel.setText("Grid cell temperatures");
        
        //JPanel optionlabelsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        SpringLayout optLabelLayout =new SpringLayout();
        SpringLayout optChkboxLayout = new SpringLayout();
        
        JPanel optionlabelsPanel = new JPanel();
        optionlabelsPanel.setPreferredSize(new Dimension(WIDTH_EDITS, 150));
        JPanel optionchkboxPanel = new JPanel();
        
        //optLabelLayout.putConstraint(SpringLayout.WEST, label, 5, SpringLayout.WEST, contentPane);
        //optChkboxLayout.putConstraint(SpringLayout.NORTH, label, 5, SpringLayout.NORTH, contentPane);

        optionchkboxPanel.setPreferredSize(new Dimension(WIDTH_EDITS, 150));
        optionlabelsPanel.add(minTempLabel);
        optionlabelsPanel.add(regionMeanTempLabel);
        optionlabelsPanel.add(maxTempLabel);
        optionlabelsPanel.add(timeMeanTempLabel);
        optionlabelsPanel.add(tempTimeRegionLabel);
        
        //optionchkboxPanel.add(minTempCheckbox);
        optionchkboxPanel.add(minTempCheckbox, 0);
       
        optionchkboxPanel.add(s1);
        optionchkboxPanel.add(meanTempRegionCheckbox,1);
        optionchkboxPanel.add(s1);
        optionchkboxPanel.add(maxTempRegionCheckbox,2);
        optionchkboxPanel.add(s1);
        optionchkboxPanel.add(meanTempTimeCheckbox,3);
        optionchkboxPanel.add(s1);
        optionchkboxPanel.add(tempsTimeRegionCheckbox,4);

        JPanel runresetPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        runresetPanel.setPreferredSize(new Dimension(WIDTH_EDITS, HEIGHT));
        runQuery.setText("Run Query");
        runQuery.addActionListener(this);
		runQuery.setEnabled(true); 
        runQuery.setActionCommand(ACTION_RUN);
        runresetPanel.add(runQuery);
        reset.setText("Reset");
        reset.addActionListener(this);
        reset.setEnabled(true); 
        reset.setActionCommand("reset");
        animate.setText("Animate");
        animate.addActionListener(this);
		animate.setEnabled(true); 
        animate.setActionCommand("animate");
        
        
        
        runresetPanel.add(reset);
        runresetPanel.add(animate);
        
        optionsPanel.add(optionlabelsPanel, BorderLayout.WEST);
        optionsPanel.add(optionchkboxPanel, BorderLayout.EAST);
        optionsPanel.add(runresetPanel, BorderLayout.CENTER);
        //this.getContentPane().add(optionsPanel, BorderLayout.SOUTH);
        firstPanel.add(optionsPanel, BorderLayout.SOUTH);

        
        simulationEndField.addActionListener(this);
        
         
        mainPanel.add(firstPanel, BorderLayout.WEST);
        this.getContentPane().add(firstPanel);
        pack();
    }// </editor-fold>//GEN-END:initComponents

         
    
    public JPanel createOutputGui()
    {
    	
    	this.getContentPane().setPreferredSize( new Dimension(1220, 620));
    	int EDIT_BOX_WIDTH = 4;
		int LABEL_HEIGHT = 26;
		JLabel s1 = new JLabel("                                             ");
        JLabel s2 = new JLabel("                   ");
        JLabel s3 = new JLabel("   ");
    	JPanel Panel;
		Panel = new JPanel();
		//Panel.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1,Color.blue));
		Panel.setPreferredSize(new Dimension(420, 620));
		Panel.setLayout(new java.awt.BorderLayout());
		Panel.setBorder(BorderFactory.createMatteBorder(1, 0, 1, 0, Color.blue));
		
		
		minTempLabel = new javax.swing.JLabel("1. Minimum temperature for region: ");
		minTempLabel1 = new javax.swing.JLabel("Min Temperature: ");
		readingTimeLabel = new javax.swing.JLabel("Reading Time: ");
		locationLabel = new javax.swing.JLabel("Location(latitude/longitude): ");
		
		Panel.add(minTempLabel);
		Panel.add(minTempLabel1);
		Panel.add(readingTimeLabel);
		Panel.add(locationLabel);
		Panel.add(s1);
		Panel.add(s1);
		 
		maxTempLabel = new javax.swing.JLabel("2. Maximum Temperature for region: ");
		maxTempLabel1 = new javax.swing.JLabel("Max Temperature: ");
		
		Panel.add(maxTempLabel);
		Panel.add(maxTempLabel1);
		Panel.add(readingTimeLabel);
		Panel.add(locationLabel);
		
		regionMeanTempLabel = new javax.swing.JLabel("Mean Temperature over region: ");
		regionMeanTempLabel2 = new JLabel("Date, Temperature");
		
		Panel.add(s1);
		Panel.add(s1);
		Panel.add(regionMeanTempLabel);
		Panel.add(regionMeanTempLabel2);
		

		timeMeanTempLabel = new javax.swing.JLabel("Mean Temperature during over time:");
		timeMeanTempLabel2 = new JLabel("Latitude/Longitude, Temperature");
		
		Panel.add(s1);
		Panel.add(s1);
		Panel.add(timeMeanTempLabel);
		Panel.add(timeMeanTempLabel2);
		
		tempTimeRegionLabel = new javax.swing.JLabel("Grid Temperatures:");
		
		Panel.add(s1);
		Panel.add(s1);
		Panel.add(tempTimeRegionLabel);
		
		
		//get dates from each Grid cell and display here.
		
		for(int k=0;k<=5;k++)
		{
		
		tempTimeRegionLabel1 = new javax.swing.JLabel("== Grid 1 - Jan 1, 2014 ==");
		
		Panel.add(tempTimeRegionLabel1);
		Panel.add(s1);
		Panel.add(s1);
		}
		
		System.out.println("Inside createOutputGui method");	
       
	    
	     pack();
	     
	     
	     return Panel;
    	
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code  (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the 

default look and feel.
         * For details see 

http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : 

javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryInterfaceUI.class.getName

()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryInterfaceUI.class.getName

()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryInterfaceUI.class.getName

()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryInterfaceUI.class.getName

()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryInterfaceUI().setVisible(true);
               
                
            }
        });
    }

    
    //set simulation start and end time.
    
    public void setSimulationPeriod(String start, String end)
    {
    	 SimpleDateFormat dtf 
         = new SimpleDateFormat("dd/MMM/yyyy HH:mm:ss.SSS");
    	 try{
    		 
    		 System.out.println("Sim start: " + simulationStartField.getText

());
        	 System.out.println("Sim end: "+ simulationEndField.getText());
    	 simStart = dtf.parse(simulationStartField.getText());
    	 simEnd = dtf.parse(simulationEndField.getText());
    	 System.out.println("Sim start: " + simStart);
    	 System.out.println("Sim end: "+ simEnd);
    	 }
    	 catch(Exception e)
    	 {
    		 System.out.println("Error parsing date time");
    	 }
    }
    
    @Override
	public void actionPerformed(ActionEvent e) {
		//get the command
		String command = e.getActionCommand();
		
		if (command.equals("byName"))
		{
			//Remove 2 lines and add code to retrieve values from DB
			
			this.setEnableAllUserOptions(false);
			List<String> lst = new ArrayList<String>();
			lst.add("Nov12-2014");
			lst.add("Oct19-2014");
			
			nameSpinner.addItem("Nov12-2014");
			nameSpinner.addItem("Oct19-2014");
			//SpinnerListModel smodel = (SpinnerListModel) nameSpinner.getModel();
			//smodel.setList(lst);
			
			
			
			
		}
		if(command.equals(nameSpinner.getAction()))
		{
			 JComboBox cb = (JComboBox)e.getSource();
		        simulationName = (String)cb.getSelectedItem();

		}
		else if(command.equals("byPF"))
		{
			//axisTiltField.setEnabled(true);
	        //orbitalEccentricityField.setEnabled(true);
	        //simulationStartField.setEnabled(true);
	        //simulationEndField.setEnabled(true);
	        
	        this.setEnableAllUserOptions(true);
	        tilt = Double.parseDouble(axisTiltField.getText());
	        eccentricity = Double.parseDouble(orbitalEccentricityField.getText());
	        
	        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            try
            {
	        simStart = df.parse(simulationStartField.getText());
	        simEnd = df.parse(simulationEndField.getText());
            }
            catch(ParseException pe)
            {
            	System.out.println("Incorrect date format");
            }
		}
		else if(command.equals("earth"))
		{
			entireEarth = true;
		}
		else if(command.equals("parameters"))
		{
			latitudeFromField.setEnabled(true);
	        latitudeToField.setEnabled(true);
	        longitudeFromField.setEnabled(true);
	        longitudeToField.setEnabled(true);
	        
	        lat_Start = Double.parseDouble(latitudeFromField.getText());
	         lat_End = Double.parseDouble(latitudeToField.getText());
	         long_Start = Double.parseDouble(longitudeFromField.getText());
	         long_End = Double.parseDouble(longitudeToField.getText());
	        
		}
		else if (command.equals(ACTION_RUN)) {
			
			
			
			
			//disable all controls
			this.setEnableAllUserOptions(false);
			//disable the run button
			runQuery.setEnabled(false);
			
			//call query controller here
			
	    	
			
			JPanel newoutput = runQuery();
			JScrollPane outputScroller = new JScrollPane(newoutput);
			//this.getContentPane().removeAll();
			this.setVisible(true);
			
			this.getContentPane().setPreferredSize(
					new Dimension(800, 1020));
			System.out.println("Before validating");
			
			//this.getContentPane().invalidate();
			System.out.println("Before repainting");
			//this.getContentPane().add(newoutput, BorderLayout.EAST);
			this.getContentPane().add(outputScroller, BorderLayout.EAST);
			System.out.println(newoutput.getComponentCount());
	    	//this.getContentPane().repaint();
	    	System.out.println("after repainting");
	    	this.setVisible(true);
			
		}
		else if(command.equals("Reset"))
		{
			clear();
		}
		else if(command.equals("filter"))
		{
			
			Border valueBorder = BorderFactory.createTitledBorder("Filtered Results ");
			namePFvaluePanel.setBorder(valueBorder);
		}
		else if(command.equals(simulationEndField.getAction()))
		{
		 //simulationEndFieldActionPerformed(evt)
    	
			setSimulationPeriod(simulationStartField.getText(),simulationEndField.getText());
		}
		else if(command.equals("animate"))
		{
			
		}
    }
    
    public void stateChanged(ChangeEvent e) {
        SpinnerListModel sModel = (SpinnerListModel) nameSpinner.getModel();
        if (sModel instanceof SpinnerListModel) {
            
        }
    }

    
   
  //enable/disable all controls
  	private void setEnableAllUserOptions(boolean bEnable) {
  	
  		
  		
         //runQuery.setEnabled(bEnable);
         //simulationNameField.setEnabled(bEnable);
  		 axisTiltField.setEnabled(bEnable);
         orbitalEccentricityField.setEnabled(bEnable);
         latitudeFromField.setEnabled(bEnable);
         latitudeToField.setEnabled(bEnable);
         longitudeFromField.setEnabled(bEnable);
         longitudeToField.setEnabled(bEnable);
         simulationStartField.setEnabled(bEnable);
         simulationEndField.setEnabled(bEnable);
         minTempCheckbox.setEnabled(bEnable);
         meanTempRegionCheckbox.setEnabled(bEnable);
         maxTempRegionCheckbox.setEnabled(bEnable);
         meanTempTimeCheckbox.setEnabled(bEnable);
         tempsTimeRegionCheckbox.setEnabled(bEnable);
         filter.setEnabled(bEnable);

  	}

  	
  	public void clear()
  	{
  		simulationNameField.setText(null);
        //axisTiltSlider.setValue(0);
        orbitalEccentricityField.setText(null);
        latitudeFromField.setText(null);
        latitudeToField.setText(null);
        longitudeFromField.setText(null);
        longitudeToField.setText(null);
        simulationStartField.setText(null);
        simulationEndField.setText(null);
        minTempCheckbox.setSelected(false);
        meanTempRegionCheckbox.setSelected(false);
        maxTempRegionCheckbox.setSelected(false);
        meanTempTimeCheckbox.setSelected(false);
        tempsTimeRegionCheckbox.setSelected(false);
  	}
   
    public JPanel runQuery()
    {
    	//for now it just prints all the values to console.
    	
    	 
    	System.out.println("ecc: "+ orbitalEccentricityField.getText());
    	System.out.println("latitude: "+ latitudeFromField.getText() + " to " + 

latitudeToField.getText());
    	System.out.println("longitude: "+ longitudeFromField.getText() + " to " + 

longitudeToField.getText());
    	System.out.println("simulation: "+ simulationStartField.getText() + " to " 

+ simulationEndField.getText());
    	System.out.println("Min Temp "+ minTempCheckbox.isSelected());
    	System.out.println("Max Temp"+ maxTempRegionCheckbox.isSelected());
    	System.out.println("Regional avg temp "+ 

meanTempRegionCheckbox.isSelected());
    	System.out.println("Avg temp for the period "+ 

meanTempTimeCheckbox.isSelected() );
    	
    	//JPanel outputPanel = createOutputGui();
    	
    	return createOutputGui();
    	
    	
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel QueryInterfaceLabel;
    private javax.swing.JLabel axisTiltLabel;

    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1, jPanel2;
    private javax.swing.JPanel firstPanel;
    private javax.swing.JTextField latitudeFromField;
    private javax.swing.JTextField axisTiltField;
    private javax.swing.JLabel latitudeLabel;
    private javax.swing.JTextField latitudeToField;
    private javax.swing.JTextField longitudeFromField;
    private javax.swing.JLabel longitudeLabel;
    private javax.swing.JTextField longitudeToField;
    private javax.swing.JLabel maxTempLabel;
    private javax.swing.JCheckBox maxTempRegionCheckbox;
    private javax.swing.JCheckBox meanTempRegionCheckbox;
    private javax.swing.JCheckBox meanTempTimeCheckbox;
    private javax.swing.JCheckBox minTempCheckbox;
    private javax.swing.JLabel minTempLabel;
    private javax.swing.JTextField orbitalEccentricityField;
    private javax.swing.JLabel orbitalEccentricityLabel;
    private javax.swing.JLabel regionMeanTempLabel;
    private javax.swing.JButton runQuery;
    private javax.swing.JButton filter;
    private javax.swing.JButton reset;
    private javax.swing.JButton animate;
    private javax.swing.JTextField simulationEndField;
    private javax.swing.JTextField simulationNameField;
    private javax.swing.JLabel simulationNameLabel;
    private javax.swing.JLabel simulationPeriodLabel;
    private javax.swing.JTextField simulationStartField;
    private javax.swing.JLabel tableOptionsLabel;
    private javax.swing.JLabel tempTimeRegionLabel;
    private javax.swing.JCheckBox tempsTimeRegionCheckbox;
    private javax.swing.JLabel timeMeanTempLabel;
    private ButtonGroup qrybuttonGroup1;
    private JRadioButton byNameButton;
    private JRadioButton byPFButton;
    private ButtonGroup regionbuttonGroup;
    private JRadioButton earthButton;
    private JRadioButton parametersButton;
   private JComboBox nameSpinner;
    private JTable outputTable;
    private JLabel spacer, latStart, latEnd, longStart, longEnd;
    private JLabel minTempLabel1,readingTimeLabel,locationLabel,maxTempLabel1,timeMeanTempLabel2,regionMeanTempLabel2,tempTimeRegionLabel1;
    private JPanel mainPanel = new JPanel();
    private JPanel namePFvaluePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    
    // End of variables declaration//GEN-END:variables
    
           
}


